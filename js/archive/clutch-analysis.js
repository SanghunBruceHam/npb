/**
 * KBO 2025 ÌÅ¥Îü¨Ïπò ÏÉÅÌô© ÏôÑÏ†Ñ Î∂ÑÏÑù
 * 1Ï†êÏ∞® Í≤ΩÍ∏∞, Ïó≠Ï†ÑÏäπ, Ïó∞Ïû•Ï†Ñ, ÎÅùÎÇ¥Í∏∞, ÎåÄÎüâÎìùÏ†ê/ÎåÄÎüâÏã§Ï†ê Îì± Ï¢ÖÌï© Î∂ÑÏÑù
 */

const fs = require('fs');
const path = require('path');

class ClutchAnalyzer {
    constructor() {
        this.teams = ['LG', 'ÌïúÌôî', 'KIA', 'ÏÇºÏÑ±', 'KT', 'SSG', 'Î°ØÎç∞', 'ÎëêÏÇ∞', 'NC', 'ÌÇ§ÏõÄ'];
        this.gameRecords = null;
        this.clutchData = {};
    }

    /**
     * Í≤åÏûÑ Í∏∞Î°ù Îç∞Ïù¥ÌÑ∞ Î°úÎìú
     */
    loadGameRecords() {
        try {
            const dataPath = path.join(__dirname, '../data/game-by-game-records.json');
            this.gameRecords = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
            console.log('‚úÖ Í≤åÏûÑ Í∏∞Î°ù Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å');
        } catch (error) {
            console.error('‚ùå Í≤åÏûÑ Í∏∞Î°ù Î°úÎìú Ïã§Ìå®:', error.message);
        }
    }

    /**
     * Ïä§ÏΩîÏñ¥ÏóêÏÑú ÎìùÏ†ê/Ïã§Ï†ê Ï∂îÏ∂ú
     */
    parseScore(scoreStr) {
        const parts = scoreStr.split(':');
        if (parts.length === 2) {
            return {
                scored: parseInt(parts[0]) || 0,
                allowed: parseInt(parts[1]) || 0
            };
        }
        return { scored: 0, allowed: 0 };
    }

    /**
     * ÌåÄÎ≥Ñ ÌÅ¥Îü¨Ïπò ÏÉÅÌô© Î∂ÑÏÑù
     */
    analyzeClutchSituations() {
        this.teams.forEach(team => {
            if (!this.gameRecords[team]) return;

            const games = this.gameRecords[team].games;
            const analysis = {
                // Í∏∞Î≥∏ ÌÜµÍ≥Ñ
                totalGames: games.length,
                
                // 1Ï†êÏ∞® Í≤ΩÍ∏∞
                oneRunGames: 0,
                oneRunWins: 0,
                oneRunLosses: 0,
                oneRunWinRate: '0.0',
                
                // Ï†ëÏ†Ñ ÏäπÎ∂Ä (2Ï†êÏ∞® Ïù¥Ìïò)
                closeGames: 0,
                closeWins: 0,
                closeLosses: 0,
                closeWinRate: '0.0',
                
                // 3Ï†êÏ∞® Í≤ΩÍ∏∞ 
                threeRunGames: 0,
                threeRunWins: 0,
                threeRunLosses: 0,
                threeRunWinRate: '0.0',
                
                // ÎåÄÎüâÎìùÏ†ê Í≤ΩÍ∏∞ (7Ï†ê Ïù¥ÏÉÅ)
                blowoutWins: 0,
                blowoutScored: [], // ÎåÄÎüâÎìùÏ†ê Í≤ΩÍ∏∞Îì§
                
                // ÎåÄÎüâÏã§Ï†ê Í≤ΩÍ∏∞ (7Ï†êÏ∞® Ïù¥ÏÉÅ Ìå®Î∞∞)
                blowoutLosses: 0,
                blowoutAllowed: [], // ÎåÄÎüâÏã§Ï†ê Í≤ΩÍ∏∞Îì§
                
                // ÏôÑÎ¥âÏäπ/ÏôÑÎ¥âÌå®
                shutoutWins: 0,
                shutoutLosses: 0,
                
                // Í≥†ÎìùÏ†ê Í≤ΩÍ∏∞ (10Ï†ê Ïù¥ÏÉÅ)
                highScoringGames: 0,
                highScoringWins: 0,
                
                // Î¨¥ÎìùÏ†ê Í≤ΩÍ∏∞
                scorelessGames: 0,
                
                // Ïó≠Ï†Ñ Í¥ÄÎ†® (Ï∂îÌõÑ Íµ¨ÌòÑ Í∞ÄÎä•)
                comebackPotential: {
                    trailingWins: 0, // Îí§Ï≤òÏßÑ ÏÉÅÌÉúÏóêÏÑú Ïó≠Ï†ÑÏäπ (Ï†êÏàòÏ∞®Î°ú Ï∂îÏ†ï)
                    leadBlownLosses: 0 // ÏïûÏÑúÎã§Í∞Ä Ïó≠Ï†ÑÌå®
                }
            };

            // Í∞Å Í≤ΩÍ∏∞ Î∂ÑÏÑù
            games.forEach(game => {
                const score = this.parseScore(game.score);
                const scoreDiff = Math.abs(score.scored - score.allowed);
                
                // 1Ï†êÏ∞® Í≤ΩÍ∏∞
                if (scoreDiff === 1) {
                    analysis.oneRunGames++;
                    if (game.result === 'W') analysis.oneRunWins++;
                    else if (game.result === 'L') analysis.oneRunLosses++;
                }
                
                // Ï†ëÏ†Ñ (2Ï†êÏ∞® Ïù¥Ìïò)
                if (scoreDiff <= 2 && game.result !== 'D') {
                    analysis.closeGames++;
                    if (game.result === 'W') analysis.closeWins++;
                    else if (game.result === 'L') analysis.closeLosses++;
                }
                
                // 3Ï†êÏ∞® Ïù¥ÎÇ¥ Í≤ΩÍ∏∞ (2Ï†êÏ∞® ÎòêÎäî 3Ï†êÏ∞®)
                if ((scoreDiff === 2 || scoreDiff === 3) && game.result !== 'D') {
                    analysis.threeRunGames++;
                    if (game.result === 'W') analysis.threeRunWins++;
                    else if (game.result === 'L') analysis.threeRunLosses++;
                }
                
                // ÎåÄÎüâÎìùÏ†ê (7Ï†ê Ïù¥ÏÉÅ ÎìùÏ†êÌïòÍ≥† Ïù¥Í∏¥ Í≤ΩÏö∞)
                if (score.scored >= 7 && game.result === 'W') {
                    analysis.blowoutWins++;
                    analysis.blowoutScored.push({
                        date: game.date,
                        opponent: game.opponent,
                        score: game.score,
                        runs: score.scored
                    });
                }
                
                // ÎåÄÎüâÏã§Ï†ê (7Ï†êÏ∞® Ïù¥ÏÉÅ Ìå®Î∞∞)
                if (game.result === 'L' && scoreDiff >= 7) {
                    analysis.blowoutLosses++;
                    analysis.blowoutAllowed.push({
                        date: game.date,
                        opponent: game.opponent,
                        score: game.score,
                        diff: scoreDiff
                    });
                }
                
                // ÏôÑÎ¥âÏäπ/ÏôÑÎ¥âÌå®
                if (score.allowed === 0 && game.result === 'W') {
                    analysis.shutoutWins++;
                }
                if (score.scored === 0 && game.result === 'L') {
                    analysis.shutoutLosses++;
                    analysis.scorelessGames++;
                }
                
                // Í≥†ÎìùÏ†ê Í≤ΩÍ∏∞ (10Ï†ê Ïù¥ÏÉÅ)
                if (score.scored >= 10) {
                    analysis.highScoringGames++;
                    if (game.result === 'W') analysis.highScoringWins++;
                }
            });

            // ÏäπÎ•† Í≥ÑÏÇ∞
            if (analysis.oneRunGames > 0) {
                analysis.oneRunWinRate = ((analysis.oneRunWins / (analysis.oneRunWins + analysis.oneRunLosses)) * 100).toFixed(1);
            }
            
            if (analysis.closeGames > 0) {
                analysis.closeWinRate = ((analysis.closeWins / (analysis.closeWins + analysis.closeLosses)) * 100).toFixed(1);
            }
            
            if (analysis.threeRunGames > 0) {
                analysis.threeRunWinRate = ((analysis.threeRunWins / (analysis.threeRunWins + analysis.threeRunLosses)) * 100).toFixed(1);
            }

            // ÌÅ¥Îü¨Ïπò ÏßÄÏàò Í≥ÑÏÇ∞ (1Ï†êÏ∞® ÏäπÎ•† + Ï†ëÏ†Ñ ÏäπÎ•† + 3Ï†êÏ∞® ÏäπÎ•†Ïùò Í∞ÄÏ§ëÌèâÍ∑†)
            const oneRunWeight = 0.5;
            const closeWeight = 0.3;
            const threeRunWeight = 0.2;
            analysis.clutchIndex = (
                (parseFloat(analysis.oneRunWinRate) * oneRunWeight + 
                 parseFloat(analysis.closeWinRate) * closeWeight +
                 parseFloat(analysis.threeRunWinRate) * threeRunWeight)
            ).toFixed(1);

            this.clutchData[team] = analysis;
        });
    }

    /**
     * Î∂ÑÏÑù Í≤∞Í≥º Ï†ÄÏû•
     */
    saveAnalysis() {
        const result = {
            lastUpdated: new Date().toISOString(),
            updateDate: new Date().toLocaleDateString('ko-KR'),
            clutchAnalysis: this.clutchData
        };

        const outputPath = path.join(__dirname, '../data/clutch-analysis.json');
        fs.writeFileSync(outputPath, JSON.stringify(result, null, 2), 'utf8');
        console.log('‚úÖ ÌÅ¥Îü¨Ïπò Î∂ÑÏÑù Í≤∞Í≥º Ï†ÄÏû• ÏôÑÎ£å:', outputPath);
    }

    /**
     * ÏöîÏïΩ Ï∂úÎ†•
     */
    printSummary() {
        console.log('\nüéØ ÌÅ¥Îü¨Ïπò ÏÉÅÌô© Î∂ÑÏÑù ÏöîÏïΩ');
        console.log('='.repeat(50));

        // 1Ï†êÏ∞® ÏäπÎ•† ÏàúÏúÑ
        const oneRunRankings = this.teams.map(team => ({
            team: team,
            analysis: this.clutchData[team]
        })).filter(t => t.analysis && t.analysis.oneRunGames > 0)
          .sort((a, b) => parseFloat(b.analysis.oneRunWinRate) - parseFloat(a.analysis.oneRunWinRate));

        console.log('\nüî• 1Ï†êÏ∞® ÏäπÎ•† ÏàúÏúÑ:');
        oneRunRankings.forEach((t, i) => {
            const a = t.analysis;
            console.log(`${i+1}. ${t.team}: ${a.oneRunWinRate}% (${a.oneRunWins}Ïäπ ${a.oneRunLosses}Ìå®, Ï¥ù ${a.oneRunGames}Í≤ΩÍ∏∞)`);
        });

        // ÌÅ¥Îü¨Ïπò ÏßÄÏàò ÏàúÏúÑ
        const clutchRankings = this.teams.map(team => ({
            team: team,
            analysis: this.clutchData[team]
        })).filter(t => t.analysis)
          .sort((a, b) => parseFloat(b.analysis.clutchIndex) - parseFloat(a.analysis.clutchIndex));

        console.log('\n‚ö° ÌÅ¥Îü¨Ïπò ÏßÄÏàò ÏàúÏúÑ:');
        clutchRankings.forEach((t, i) => {
            const a = t.analysis;
            console.log(`${i+1}. ${t.team}: ${a.clutchIndex} (1Ï†êÏ∞®: ${a.oneRunWinRate}%, Ï†ëÏ†Ñ: ${a.closeWinRate}%, 3Ï†êÏ∞®ÎÇ¥: ${a.threeRunWinRate}%)`);
        });

        // 3Ï†êÏ∞® ÏäπÎ•† ÏàúÏúÑ
        const threeRunRankings = this.teams.map(team => ({
            team: team,
            analysis: this.clutchData[team]
        })).filter(t => t.analysis && t.analysis.threeRunGames > 0)
          .sort((a, b) => parseFloat(b.analysis.threeRunWinRate) - parseFloat(a.analysis.threeRunWinRate));

        console.log('\nüéØ 3Ï†êÏ∞® Ïù¥ÎÇ¥ ÏäπÎ•† ÏàúÏúÑ:');
        threeRunRankings.forEach((t, i) => {
            const a = t.analysis;
            console.log(`${i+1}. ${t.team}: ${a.threeRunWinRate}% (${a.threeRunWins}Ïäπ ${a.threeRunLosses}Ìå®, Ï¥ù ${a.threeRunGames}Í≤ΩÍ∏∞)`);
        });

        // ÎåÄÎüâÎìùÏ†ê ÏàúÏúÑ
        const blowoutRankings = this.teams.map(team => ({
            team: team,
            analysis: this.clutchData[team]
        })).filter(t => t.analysis)
          .sort((a, b) => b.analysis.blowoutWins - a.analysis.blowoutWins);

        console.log('\nüí• ÎåÄÎüâÎìùÏ†ê ÏàúÏúÑ:');
        blowoutRankings.forEach((t, i) => {
            const a = t.analysis;
            console.log(`${i+1}. ${t.team}: ${a.blowoutWins}Ìöå (7ÎìùÏ†ê Ïù¥ÏÉÅ ÏäπÎ¶¨)`);
        });
    }

    /**
     * Ï†ÑÏ≤¥ Î∂ÑÏÑù Ïã§Ìñâ
     */
    analyze() {
        console.log('üéØ KBO 2025 ÌÅ¥Îü¨Ïπò ÏÉÅÌô© ÏôÑÏ†Ñ Î∂ÑÏÑù ÏãúÏûë...');
        
        this.loadGameRecords();
        if (!this.gameRecords) {
            console.error('‚ùå Í≤åÏûÑ Í∏∞Î°ùÏùÑ Î°úÎìúÌï† Ïàò ÏóÜÏñ¥ Î∂ÑÏÑùÏùÑ Ï§ëÎã®Ìï©ÎãàÎã§.');
            return;
        }

        this.analyzeClutchSituations();
        this.saveAnalysis();
        this.printSummary();

        console.log('\n‚úÖ ÌÅ¥Îü¨Ïπò ÏÉÅÌô© ÏôÑÏ†Ñ Î∂ÑÏÑù ÏôÑÎ£å!');
        return this.clutchData;
    }
}

// Î™®Îìà Ïã§Ìñâ
if (require.main === module) {
    const analyzer = new ClutchAnalyzer();
    analyzer.analyze();
}

module.exports = ClutchAnalyzer;