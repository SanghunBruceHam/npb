#!/usr/bin/env node
/**
 * NPB 2025 ÎàÑÎùΩÎêú ÎÇ†ÏßúÎì§ Ïû¨ÏàòÏßë ÌÅ¨Î°§Îü¨
 * Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ÏóêÏÑú ÎàÑÎùΩÎêú ÎÇ†ÏßúÎì§Îßå ÎåÄÏÉÅÏúºÎ°ú ÌÅ¨Î°§ÎßÅ
 */

const puppeteer = require('puppeteer');
const fs = require('fs').promises;
const path = require('path');

// ÎàÑÎùΩÎêú ÎÇ†ÏßúÎì§ (61Í∞ú)
const MISSING_DATES = [
    '2025-03-31', '2025-04-07', '2025-04-14', '2025-04-21', '2025-04-24', '2025-04-28',
    '2025-05-08', '2025-05-10', '2025-05-12', '2025-05-19', '2025-05-26',
    '2025-06-02', '2025-06-09', '2025-06-16', '2025-06-19', '2025-06-23', '2025-06-25', '2025-06-26', '2025-06-30',
    '2025-07-01', '2025-07-02', '2025-07-03', '2025-07-07', '2025-07-22', '2025-07-23', '2025-07-24', '2025-07-25', '2025-07-28',
    '2025-08-04', '2025-08-18', '2025-08-20', '2025-08-21', '2025-08-25',
    '2025-09-01', '2025-09-08',
    '2025-10-06', '2025-10-07', '2025-10-08', '2025-10-09', '2025-10-10', '2025-10-11', '2025-10-12', '2025-10-13',
    '2025-10-14', '2025-10-15', '2025-10-16', '2025-10-17', '2025-10-18', '2025-10-19', '2025-10-20', '2025-10-21',
    '2025-10-22', '2025-10-23', '2025-10-24', '2025-10-25', '2025-10-26', '2025-10-27', '2025-10-28', '2025-10-29',
    '2025-10-30', '2025-10-31'
];

class NPBMissingDatesCrawler {
    constructor() {
        this.dataDir = path.join(__dirname, '..', 'data');
        
        // NPB ÌåÄ Ï†ïÎ≥¥ (ÏùºÎ≥∏Ïñ¥ ÌòïÏãù)
        this.teams = {
            // „Çª„É≥„Éà„É©„É´„É™„Éº„Ç∞ (Central League)
            central: {
                'Ë™≠Â£≤„Ç∏„É£„Ç§„Ç¢„É≥„ÉÑ': { short: 'Â∑®‰∫∫', stadium: 'Êù±‰∫¨„Éâ„Éº„É†' },
                'Â∑®‰∫∫': { short: 'Â∑®‰∫∫', stadium: 'Êù±‰∫¨„Éâ„Éº„É†' },
                'Èò™Á•û„Çø„Ç§„Ç¨„Éº„Çπ': { short: 'Èò™Á•û', stadium: 'Áî≤Â≠êÂúí' },
                'Èò™Á•û': { short: 'Èò™Á•û', stadium: 'Áî≤Â≠êÂúí' },
                'Ê®™ÊµúDeNA„Éô„Ç§„Çπ„Çø„Éº„Ç∫': { short: 'DeNA', stadium: 'Ê®™Êµú' },
                'DeNA': { short: 'DeNA', stadium: 'Ê®™Êµú' },
                'Â∫ÉÂ≥∂Êù±Ê¥ã„Ç´„Éº„Éó': { short: 'Â∫ÉÂ≥∂', stadium: '„Éû„ÉÑ„ÉÄ„Çπ„Çø„Ç∏„Ç¢„É†' },
                'Â∫ÉÂ≥∂': { short: 'Â∫ÉÂ≥∂', stadium: '„Éû„ÉÑ„ÉÄ„Çπ„Çø„Ç∏„Ç¢„É†' },
                '‰∏≠Êó•„Éâ„É©„Ç¥„É≥„Ç∫': { short: '‰∏≠Êó•', stadium: '„Éê„É≥„ÉÜ„É™„É≥„Éâ„Éº„É†' },
                '‰∏≠Êó•': { short: '‰∏≠Êó•', stadium: '„Éê„É≥„ÉÜ„É™„É≥„Éâ„Éº„É†' },
                '„É§„ÇØ„É´„Éà„Çπ„ÉØ„É≠„Éº„Ç∫': { short: '„É§„ÇØ„É´„Éà', stadium: 'Á•ûÂÆÆ' },
                '„É§„ÇØ„É´„Éà': { short: '„É§„ÇØ„É´„Éà', stadium: 'Á•ûÂÆÆ' }
            },
            // „Éë„Ç∑„Éï„Ç£„ÉÉ„ÇØ„É™„Éº„Ç∞ (Pacific League)
            pacific: {
                '„Ç™„É™„ÉÉ„ÇØ„Çπ„Éª„Éê„Éï„Ç°„É≠„Éº„Ç∫': { short: '„Ç™„É™„ÉÉ„ÇØ„Çπ', stadium: '‰∫¨„Çª„É©DÂ§ßÈò™' },
                '„Ç™„É™„ÉÉ„ÇØ„Çπ': { short: '„Ç™„É™„ÉÉ„ÇØ„Çπ', stadium: '‰∫¨„Çª„É©DÂ§ßÈò™' },
                'ÂçÉËëâ„É≠„ÉÉ„ÉÜ„Éû„É™„Éº„É≥„Ç∫': { short: '„É≠„ÉÉ„ÉÜ', stadium: 'ZOZO„Éû„É™„É≥' },
                '„É≠„ÉÉ„ÉÜ': { short: '„É≠„ÉÉ„ÉÜ', stadium: 'ZOZO„Éû„É™„É≥' },
                'Á¶èÂ≤°„ÇΩ„Éï„Éà„Éê„É≥„ÇØ„Éõ„Éº„ÇØ„Çπ': { short: '„ÇΩ„Éï„Éà„Éê„É≥„ÇØ', stadium: '„Åø„Åö„ÅªPayPay' },
                '„ÇΩ„Éï„Éà„Éê„É≥„ÇØ': { short: '„ÇΩ„Éï„Éà„Éê„É≥„ÇØ', stadium: '„Åø„Åö„ÅªPayPay' },
                'ÂåóÊµ∑ÈÅìÊó•Êú¨„Éè„É†„Éï„Ç°„Ç§„Çø„Éº„Ç∫': { short: 'Êó•Êú¨„Éè„É†', stadium: '„Ç®„Çπ„Ç≥„É≥„Éï„Ç£„Éº„É´„Éâ' },
                'Êó•Êú¨„Éè„É†': { short: 'Êó•Êú¨„Éè„É†', stadium: '„Ç®„Çπ„Ç≥„É≥„Éï„Ç£„Éº„É´„Éâ' },
                'Êù±ÂåóÊ•ΩÂ§©„Ç¥„Éº„É´„Éá„É≥„Ç§„Éº„Ç∞„É´„Çπ': { short: 'Ê•ΩÂ§©', stadium: 'Ê•ΩÂ§©„É¢„Éê„Ç§„É´' },
                'Ê•ΩÂ§©': { short: 'Ê•ΩÂ§©', stadium: 'Ê•ΩÂ§©„É¢„Éê„Ç§„É´' },
                'ÂüºÁéâË•øÊ≠¶„É©„Ç§„Ç™„É≥„Ç∫': { short: 'Ë•øÊ≠¶', stadium: '„Éô„É´„Éº„Éä„Éâ„Éº„É†' },
                'Ë•øÊ≠¶': { short: 'Ë•øÊ≠¶', stadium: '„Éô„É´„Éº„Éä„Éâ„Éº„É†' }
            }
        };
    }

    getTeamLeague(teamName) {
        // ÏÑºÌä∏Îü¥Î¶¨Í∑∏ ÌôïÏù∏
        for (const team of Object.keys(this.teams.central)) {
            if (teamName.includes(team) || team.includes(teamName)) {
                return 'Central';
            }
        }
        
        // ÌååÏãúÌîΩÎ¶¨Í∑∏ ÌôïÏù∏
        for (const team of Object.keys(this.teams.pacific)) {
            if (teamName.includes(team) || team.includes(teamName)) {
                return 'Pacific';
            }
        }
        
        return 'Unknown';
    }

    getTeamShort(teamName) {
        // ÏÑºÌä∏Îü¥Î¶¨Í∑∏ÏóêÏÑú Ï∞æÍ∏∞
        for (const [fullName, info] of Object.entries(this.teams.central)) {
            if (teamName.includes(fullName) || fullName.includes(teamName)) {
                return info.short;
            }
        }
        
        // ÌååÏãúÌîΩÎ¶¨Í∑∏ÏóêÏÑú Ï∞æÍ∏∞
        for (const [fullName, info] of Object.entries(this.teams.pacific)) {
            if (teamName.includes(fullName) || fullName.includes(teamName)) {
                return info.short;
            }
        }
        
        return teamName;
    }

    async crawlDateData(dateStr) {
        console.log(`üîÑ ${dateStr} Ïû¨ÏàòÏßë Ï§ë...`);
        
        const browser = await puppeteer.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });

        try {
            const page = await browser.newPage();
            await page.setViewport({ width: 1920, height: 1080 });

            const url = `https://baseball.yahoo.co.jp/npb/schedule/?date=${dateStr}`;
            
            await page.goto(url, {
                waitUntil: 'networkidle2',
                timeout: 20000  // ÌÉÄÏûÑÏïÑÏõÉÏùÑ Ï§ÑÏó¨ÏÑú Îπ†Î•¥Í≤å Ï≤òÎ¶¨
            });

            await new Promise(resolve => setTimeout(resolve, 2000));

            // Í≤ΩÍ∏∞ Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
            const gameData = await page.evaluate(() => {
                const games = [];
                const allElements = [];
                
                const selectors = [
                    '.bb-scoreBoard',
                    '.game-score', 
                    '.sc-score',
                    '[class*="score"]'
                ];

                for (const selector of selectors) {
                    const elements = document.querySelectorAll(selector);
                    
                    if (elements.length > 0) {
                        elements.forEach((element) => {
                            const text = element.textContent?.trim();
                            if (text && text.length > 0 && text.length < 200) {
                                allElements.push({
                                    selector: selector,
                                    text: text
                                });
                            }
                        });
                    }
                }
                
                // Ìå®ÌÑ¥ Îß§Ïπ≠ÏúºÎ°ú Í≤ΩÍ∏∞ Ï†ïÎ≥¥ Ï∂îÏ∂ú
                let teamBuffer = [];
                let scoreBuffer = null;
                let timeBuffer = null;
                let statusBuffer = null;
                
                allElements.forEach(element => {
                    const text = element.text;
                    
                    // ÌåÄÎ™Ö Ìå®ÌÑ¥
                    if (/^(Â∑®‰∫∫|Èò™Á•û|DeNA|Â∫ÉÂ≥∂|‰∏≠Êó•|„É§„ÇØ„É´„Éà|„Ç™„É™„ÉÉ„ÇØ„Çπ|„É≠„ÉÉ„ÉÜ|„ÇΩ„Éï„Éà„Éê„É≥„ÇØ|Êó•Êú¨„Éè„É†|Ê•ΩÂ§©|Ë•øÊ≠¶)$/.test(text)) {
                        teamBuffer.push(text);
                    }
                    // Ï†êÏàò Ìå®ÌÑ¥ 
                    else if (/^\d+-\d+$/.test(text)) {
                        if (!scoreBuffer) {
                            scoreBuffer = text;
                        }
                    }
                    // ÏãúÍ∞Ñ Ìå®ÌÑ¥
                    else if (/^\d{1,2}:\d{2}$/.test(text)) {
                        if (!timeBuffer) {
                            timeBuffer = text;
                        }
                    }
                    // Í≤ΩÍ∏∞ ÏÉÅÌÉú Ìå®ÌÑ¥
                    else if (/(Ë©¶ÂêàÁµÇ‰∫Ü|Ë©¶Âêà‰∏≠|‰∏≠Ê≠¢|Âª∂Êúü|ÈñãÂßãÂâç|Ë©¶ÂêàÂâç|‰∫àÂëäÂÖàÁô∫)/.test(text)) {
                        statusBuffer = text;
                    }
                    
                    // Í≤ΩÍ∏∞ ÏôÑÎ£åÏãú Ï†ÄÏû•
                    if (teamBuffer.length >= 2 && (scoreBuffer || timeBuffer)) {
                        let gameInfo = {
                            awayTeam: teamBuffer[teamBuffer.length - 2] || teamBuffer[0],
                            homeTeam: teamBuffer[teamBuffer.length - 1] || teamBuffer[1],
                            status: statusBuffer || (scoreBuffer ? 'Ë©¶ÂêàÁµÇ‰∫Ü' : 'ÈñãÂßãÂâç')
                        };
                        
                        if (scoreBuffer) {
                            const scores = scoreBuffer.split('-');
                            if (scores.length === 2) {
                                gameInfo.awayScore = scores[0];
                                gameInfo.homeScore = scores[1];
                                gameInfo.gameType = 'completed';
                            }
                        } else if (timeBuffer) {
                            gameInfo.gameTime = timeBuffer;
                            gameInfo.gameType = 'scheduled';
                            gameInfo.awayScore = '-';
                            gameInfo.homeScore = '-';
                        }
                        
                        const gameKey = `${gameInfo.awayTeam}-${gameInfo.homeTeam}`;
                        if (!games.find(g => `${g.awayTeam}-${g.homeTeam}` === gameKey)) {
                            games.push(gameInfo);
                        }
                        
                        teamBuffer = [];
                        scoreBuffer = null;
                        timeBuffer = null;
                        statusBuffer = null;
                    }
                });
                
                return { games };
            });

            return gameData;

        } catch (error) {
            console.error(`‚ùå ${dateStr} Ïû¨ÏàòÏßë Ïã§Ìå®:`, error.message);
            return { games: [] };
        } finally {
            await browser.close();
        }
    }

    formatGameData(games, date) {
        const formattedGames = [];
        
        games.forEach(game => {
            const awayTeamShort = this.getTeamShort(game.awayTeam);
            const homeTeamShort = this.getTeamShort(game.homeTeam);
            const league = this.getTeamLeague(game.homeTeam);
            
            let gameResult;
            let formattedGame = {
                date: date,
                awayTeam: awayTeamShort,
                homeTeam: homeTeamShort,
                status: game.status || 'Ë©¶ÂêàÁµÇ‰∫Ü',
                league: league,
                gameType: game.gameType || 'completed'
            };
            
            if (game.gameType === 'completed' && game.awayScore !== '-' && game.homeScore !== '-') {
                formattedGame.awayScore = parseInt(game.awayScore);
                formattedGame.homeScore = parseInt(game.homeScore);
                gameResult = `${awayTeamShort} ${game.awayScore}:${game.homeScore} ${homeTeamShort}(H)`;
            } else if (game.gameType === 'scheduled' && game.gameTime) {
                formattedGame.gameTime = game.gameTime;
                formattedGame.awayScore = '-';
                formattedGame.homeScore = '-';
                gameResult = `${awayTeamShort} vs ${homeTeamShort}(H) ${game.gameTime}`;
            } else {
                formattedGame.awayScore = '-';
                formattedGame.homeScore = '-';
                gameResult = `${awayTeamShort} vs ${homeTeamShort}(H) ${game.status || 'Êú™ÂÆö'}`;
            }
            
            formattedGame.result = gameResult;
            formattedGames.push(formattedGame);
        });
        
        return formattedGames;
    }

    async run() {
        console.log(`üèüÔ∏è NPB 2025 ÎàÑÎùΩÎêú ÎÇ†ÏßúÎì§ Ïû¨ÏàòÏßë ÏãúÏûë (${MISSING_DATES.length}Í∞ú ÎÇ†Ïßú)`);
        
        const foundGames = [];
        let processedCount = 0;
        let gamesFound = 0;
        
        for (const dateStr of MISSING_DATES) {
            const dayData = await this.crawlDateData(dateStr);
            processedCount++;
            
            if (dayData.games.length > 0) {
                const formattedGames = this.formatGameData(dayData.games, dateStr);
                foundGames.push({
                    date: dateStr,
                    games: formattedGames,
                    centralGames: formattedGames.filter(g => g.league === 'Central'),
                    pacificGames: formattedGames.filter(g => g.league === 'Pacific')
                });
                
                gamesFound += formattedGames.length;
                console.log(`‚úÖ ${dateStr}: ${formattedGames.length}Í≤ΩÍ∏∞ Î∞úÍ≤¨! (ÏÑ∏Î¶¨Í∑∏: ${formattedGames.filter(g => g.league === 'Central').length}, ÌååÎ¶¨Í∑∏: ${formattedGames.filter(g => g.league === 'Pacific').length})`);
            } else {
                console.log(`üìã ${dateStr}: Í≤ΩÍ∏∞ ÏóÜÏùå (${processedCount}/${MISSING_DATES.length})`);
            }
            
            // ÏöîÏ≤≠ Í∞ÑÍ≤©
            await new Promise(resolve => setTimeout(resolve, 1500));
        }
        
        console.log(`\nüéØ Ïû¨ÏàòÏßë ÏôÑÎ£å:`);
        console.log(`   Ï≤òÎ¶¨Ìïú ÎÇ†Ïßú: ${processedCount}Í∞ú`);
        console.log(`   Í≤ΩÍ∏∞ Î∞úÍ≤¨: ${gamesFound}Í≤ΩÍ∏∞ (${foundGames.length}Ïùº)`);
        
        if (foundGames.length > 0) {
            // JSONÏúºÎ°ú Ï†ÄÏû•
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const jsonPath = path.join(this.dataDir, `npb-2025-missing-games-${timestamp}.json`);
            await fs.writeFile(jsonPath, JSON.stringify(foundGames, null, 2), 'utf8');
            
            console.log(`üíæ Î∞úÍ≤¨Îêú Í≤ΩÍ∏∞Îì§ Ï†ÄÏû•: ${jsonPath}`);
            
            foundGames.forEach(dayData => {
                console.log(`üìÖ ${dayData.date}: ${dayData.games.length}Í≤ΩÍ∏∞`);
                dayData.games.forEach(game => {
                    console.log(`   ${game.result}`);
                });
            });
        }
        
        return foundGames;
    }
}

async function main() {
    const crawler = new NPBMissingDatesCrawler();
    const foundGames = await crawler.run();
    
    if (foundGames.length > 0) {
        console.log(`\nüéâ ${foundGames.length}ÏùºÏóêÏÑú Í≤ΩÍ∏∞ Î∞úÍ≤¨!`);
        console.log('Ïù¥Ï†ú Î©îÏù∏ ÌÅ¨Î°§Îü¨Î•º Îã§Ïãú Ïã§ÌñâÌï¥ÏÑú Îç∞Ïù¥ÌÑ∞Î•º Î≥ëÌï©Ìï¥Ï£ºÏÑ∏Ïöî.');
    } else {
        console.log(`\nüìù ÎàÑÎùΩÎêú ÎÇ†ÏßúÎì§ÏùÄ Î™®Îëê Ìú¥ÏãùÏùºÏûÖÎãàÎã§.`);
    }
}

main();