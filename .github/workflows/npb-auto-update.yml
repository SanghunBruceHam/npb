name: 🏈 NPB Auto Data Update

on:
  push:
    branches: [ main ]
    paths:
      - 'crawler/**'
      - '*.sh'
      - '.github/workflows/npb-auto-update.yml'
  schedule:
    # 🕰️ 한국시간 기준 주요 시간대 (UTC 기준)
    - cron: '30 7 * * *'  # UTC 07:30 = KST 16:30
    - cron: '0 8 * * *'   # UTC 08:00 = KST 17:00
    - cron: '30 8 * * *'  # UTC 08:30 = KST 17:30
    - cron: '30 10 * * *' # UTC 10:30 = KST 19:30
    - cron: '0 11 * * *'  # UTC 11:00 = KST 20:00
    - cron: '30 11 * * *' # UTC 11:30 = KST 20:30
    - cron: '0 12 * * *'  # UTC 12:00 = KST 21:00
    - cron: '30 12 * * *' # UTC 12:30 = KST 21:30
    - cron: '45 12 * * *' # UTC 12:45 = KST 21:45
    - cron: '0 13 * * *'  # UTC 13:00 = KST 22:00
    - cron: '15 13 * * *' # UTC 13:15 = KST 22:15
    - cron: '30 13 * * *' # UTC 13:30 = KST 22:30
    - cron: '0 14 * * *'  # UTC 14:00 = KST 23:00
    - cron: '30 14 * * *' # UTC 14:30 = KST 23:30
  workflow_dispatch:
    inputs:
      skip_crawling:
        description: '크롤링 건너뛰기 (변환만)'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']

permissions:
  contents: write
  actions: read

concurrency:
  group: npb-auto-update-${{ github.ref }}
  cancel-in-progress: true

env:
  TZ: Asia/Seoul

jobs:
  auto-update:
    name: 🤖 Auto Update NPB Data
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📁 저장소 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Python 환경 설정
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'crawler/requirements.txt'

      - name: 🟢 Node.js 환경 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Python 의존성 설치
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f crawler/requirements.txt ]; then
            pip install -r crawler/requirements.txt
          else
            pip install requests beautifulsoup4 lxml
          fi
        timeout-minutes: 5

      - name: 🔄 NPB 데이터 파이프라인 실행
        run: |
          chmod +x ./run_new_pipeline.sh
          set -e
          
          if [ "${{ github.event.inputs.skip_crawling }}" = "true" ]; then
            echo "⏭️ 크롤링 건너뛰고 변환만 실행"
            ./run_new_pipeline.sh --skip-crawl
          else
            echo "🏃‍♂️ 전체 파이프라인 실행 (최근 3일 데이터)"
            ./run_new_pipeline.sh 3
          fi
        timeout-minutes: 20
        continue-on-error: false

      - name: 📊 최종 데이터 현황 확인
        run: |
          echo "🔍 NPB 데이터 파이프라인 실행 결과 요약"
          echo "========================================"
          
          # JSON 파일들 확인
          echo "📄 생성된 JSON 파일들:"
          if [ -f "data/standings.json" ]; then
            STANDINGS_SIZE=$(stat -f%z "data/standings.json" 2>/dev/null || stat -c%s "data/standings.json" 2>/dev/null || echo "0")
            echo "  ✅ standings.json (${STANDINGS_SIZE} bytes)"
            
            # 순위표 팀 수 확인
            if command -v jq >/dev/null 2>&1; then
              CENTRAL_TEAMS=$(jq -r '.central | length' data/standings.json 2>/dev/null || echo "?")
              PACIFIC_TEAMS=$(jq -r '.pacific | length' data/standings.json 2>/dev/null || echo "?")
              echo "     📈 센트럴리그: ${CENTRAL_TEAMS}팀, 퍼시픽리그: ${PACIFIC_TEAMS}팀"
            fi
          else
            echo "  ❌ standings.json 생성 실패"
          fi
          
          if [ -f "data/games.json" ]; then
            GAMES_SIZE=$(stat -f%z "data/games.json" 2>/dev/null || stat -c%s "data/games.json" 2>/dev/null || echo "0")
            echo "  ✅ games.json (${GAMES_SIZE} bytes)"
            
            # 경기 수 확인
            if command -v jq >/dev/null 2>&1; then
              GAMES_COUNT=$(jq '. | length' data/games.json 2>/dev/null || echo "?")
              echo "     ⚾ 총 경기 수: ${GAMES_COUNT}경기"
            fi
          else
            echo "  ❌ games.json 생성 실패"
          fi
          
          if [ -f "data/upcoming.json" ]; then
            UPCOMING_SIZE=$(stat -f%z "data/upcoming.json" 2>/dev/null || stat -c%s "data/upcoming.json" 2>/dev/null || echo "0")
            echo "  ✅ upcoming.json (${UPCOMING_SIZE} bytes)"
            
            # 예정 경기 수 확인
            if command -v jq >/dev/null 2>&1; then
              UPCOMING_COUNT=$(jq '. | length' data/upcoming.json 2>/dev/null || echo "?")
              echo "     📅 예정 경기 수: ${UPCOMING_COUNT}경기"
            fi
          else
            echo "  ❌ upcoming.json 생성 실패"
          fi
          
          if [ -f "data/dashboard.json" ]; then
            DASHBOARD_SIZE=$(stat -f%z "data/dashboard.json" 2>/dev/null || stat -c%s "data/dashboard.json" 2>/dev/null || echo "0")
            echo "  ✅ dashboard.json (${DASHBOARD_SIZE} bytes)"
          else
            echo "  ❌ dashboard.json 생성 실패"
          fi
          
          # 간단한 TXT 파일들 확인
          echo ""
          echo "📝 TXT 데이터 파일들:"
          if [ -d "data/simple" ]; then
            TXT_COUNT=$(find data/simple -name "*.txt" -type f | wc -l | tr -d ' ')
            echo "  📁 data/simple/ 디렉토리: ${TXT_COUNT}개 파일"
            
            # 최신 파일 몇 개 표시
            if [ $TXT_COUNT -gt 0 ]; then
              echo "  📋 최근 생성된 파일들:"
              find data/simple -name "*.txt" -type f -exec ls -la {} \; | sort -k6,7 | tail -5 | while read line; do
                echo "     $line"
              done
            fi
          else
            echo "  ❌ data/simple/ 디렉토리 없음"
          fi
          
          # 로그 파일 확인
          echo ""
          echo "📋 생성된 로그:"
          if [ -d "logs" ]; then
            find logs -name "*.log" -o -name "*.txt" | sort | while read logfile; do
              if [ -f "$logfile" ]; then
                LOG_SIZE=$(stat -f%z "$logfile" 2>/dev/null || stat -c%s "$logfile" 2>/dev/null || echo "0")
                echo "  📄 $logfile (${LOG_SIZE} bytes)"
              fi
            done
          fi
          
          echo ""
          echo "✨ 데이터 현황 요약 완료"

      - name: 📝 변경사항 확인 및 커밋
        run: |
          # Git 사용자 설정
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # 변경된 파일 추가
          git add data/simple/*.txt 2>/dev/null || true
          git add data/*.json 2>/dev/null || true
          
          # 변경사항이 있는지 확인
          if ! git diff --cached --quiet; then
            # 한국 시간으로 커밋 메시지 생성
            CURRENT_TIME=$(date '+%Y-%m-%d %H:%M KST')
            CHANGED_FILES=$(git diff --cached --name-only | wc -l)
            
            echo "✅ ${CHANGED_FILES}개 파일 변경 감지"
            
            # 커밋 및 푸시
            git commit -m "🤖 NPB 자동 업데이트 - ${CURRENT_TIME}
            
            📈 업데이트된 데이터:
            - NPB 순위표 및 경기 결과
            - 남은 경기 일정
            - 대시보드 통계
            
            🚀 Generated by GitHub Actions"
            
            # 재시도 로직을 포함한 푸시
            for i in {1..3}; do
              if git push; then
                echo "✅ 푸시 성공 (시도: $i)"
                break
              else
                echo "❌ 푸시 실패 (시도: $i/3)"
                if [ $i -lt 3 ]; then
                  echo "⏳ 5초 후 재시도..."
                  sleep 5
                  git pull --rebase origin main || true
                fi
              fi
            done
          else
            echo "ℹ️ 업데이트할 데이터가 없습니다"
          fi
        timeout-minutes: 5
