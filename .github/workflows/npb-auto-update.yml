name: 🏈 NPB Auto Data Update

on:
  push:
    branches: [ main ]
    paths:
      - 'crawler/**'
      - '*.sh'
      - '.github/workflows/npb-auto-update.yml'
  schedule:
    # 🕰️ 한국시간 17:00~22:30 (UTC 08:00~13:30) 구간을 15분 간격으로 실행
    - cron: '0 8 * * *'
    - cron: '15 8 * * *'
    - cron: '30 8 * * *'
    - cron: '45 8 * * *'
    - cron: '0 9 * * *'
    - cron: '15 9 * * *'
    - cron: '30 9 * * *'
    - cron: '45 9 * * *'
    - cron: '0 10 * * *'
    - cron: '15 10 * * *'
    - cron: '30 10 * * *'
    - cron: '45 10 * * *'
    - cron: '0 11 * * *'
    - cron: '15 11 * * *'
    - cron: '30 11 * * *'
    - cron: '45 11 * * *'
    - cron: '0 12 * * *'
    - cron: '15 12 * * *'
    - cron: '30 12 * * *'
    - cron: '45 12 * * *'
    - cron: '0 13 * * *'
    - cron: '15 13 * * *'
    - cron: '30 13 * * *'
  workflow_dispatch:
    inputs:
      skip_crawling:
        description: '크롤링 건너뛰기 (변환만)'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']

permissions:
  contents: write
  actions: read

concurrency:
  group: npb-auto-update-${{ github.ref }}
  cancel-in-progress: true

env:
  TZ: Asia/Seoul

jobs:
  auto-update:
    name: 🤖 Auto Update NPB Data
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📁 저장소 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Python 환경 설정
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'crawler/requirements.txt'

      - name: 📦 Python 의존성 설치
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f crawler/requirements.txt ]; then
            pip install -r crawler/requirements.txt
          else
            pip install requests beautifulsoup4 lxml
          fi
        timeout-minutes: 5

      - name: 🔄 NPB 데이터 파이프라인 실행
        run: |
          chmod +x ./run_new_pipeline.sh
          set -e
          
          if [ "${{ github.event.inputs.skip_crawling }}" = "true" ]; then
            echo "⏭️ 크롤링 건너뛰고 변환만 실행"
            ./run_new_pipeline.sh --skip-crawl
          else
            echo "🏃‍♂️ 전체 파이프라인 실행 (최근 1일 데이터)"
            ./run_new_pipeline.sh 1
          fi
        timeout-minutes: 20
        continue-on-error: false

      - name: 📊 최종 데이터 현황 확인
        run: |
          echo "🔍 NPB 데이터 파이프라인 실행 결과 요약"
          echo "========================================"
          
          # JSON 파일들 확인
          echo "📄 생성된 JSON 파일들:"
          if [ -f "data/standings.json" ]; then
            STANDINGS_SIZE=$(stat -f%z "data/standings.json" 2>/dev/null || stat -c%s "data/standings.json" 2>/dev/null || echo "0")
            echo "  ✅ standings.json (${STANDINGS_SIZE} bytes)"
            
            # 순위표 팀 수 확인
            if command -v jq >/dev/null 2>&1; then
              CENTRAL_TEAMS=$(jq -r '.central | length' data/standings.json 2>/dev/null || echo "?")
              PACIFIC_TEAMS=$(jq -r '.pacific | length' data/standings.json 2>/dev/null || echo "?")
              echo "     📈 센트럴리그: ${CENTRAL_TEAMS}팀, 퍼시픽리그: ${PACIFIC_TEAMS}팀"
            fi
          else
            echo "  ❌ standings.json 생성 실패"
          fi
          
          if [ -f "data/games.json" ]; then
            GAMES_SIZE=$(stat -f%z "data/games.json" 2>/dev/null || stat -c%s "data/games.json" 2>/dev/null || echo "0")
            echo "  ✅ games.json (${GAMES_SIZE} bytes)"
            
            # 경기 수 확인
            if command -v jq >/dev/null 2>&1; then
              GAMES_COUNT=$(jq '. | length' data/games.json 2>/dev/null || echo "?")
              echo "     ⚾ 총 경기 수: ${GAMES_COUNT}경기"
            fi
          else
            echo "  ❌ games.json 생성 실패"
          fi
          
          if [ -f "data/upcoming.json" ]; then
            UPCOMING_SIZE=$(stat -f%z "data/upcoming.json" 2>/dev/null || stat -c%s "data/upcoming.json" 2>/dev/null || echo "0")
            echo "  ✅ upcoming.json (${UPCOMING_SIZE} bytes)"
            
            # 예정 경기 수 확인
            if command -v jq >/dev/null 2>&1; then
              UPCOMING_COUNT=$(jq '. | length' data/upcoming.json 2>/dev/null || echo "?")
              echo "     📅 예정 경기 수: ${UPCOMING_COUNT}경기"
            fi
          else
            echo "  ❌ upcoming.json 생성 실패"
          fi
          
          if [ -f "data/dashboard.json" ]; then
            DASHBOARD_SIZE=$(stat -f%z "data/dashboard.json" 2>/dev/null || stat -c%s "data/dashboard.json" 2>/dev/null || echo "0")
            echo "  ✅ dashboard.json (${DASHBOARD_SIZE} bytes)"
          else
            echo "  ❌ dashboard.json 생성 실패"
          fi
          
          # 간단한 TXT 파일들 확인
          echo ""
          echo "📝 TXT 데이터 파일들:"
          if [ -d "data/simple" ]; then
            TXT_COUNT=$(find data/simple -name "*.txt" -type f | wc -l | tr -d ' ')
            echo "  📁 data/simple/ 디렉토리: ${TXT_COUNT}개 파일"
            
            # 최신 파일 몇 개 표시
            if [ $TXT_COUNT -gt 0 ]; then
              echo "  📋 최근 생성된 파일들:"
              find data/simple -name "*.txt" -type f -exec ls -la {} \; | sort -k6,7 | tail -5 | while read line; do
                echo "     $line"
              done
            fi
          else
            echo "  ❌ data/simple/ 디렉토리 없음"
          fi
          
          # 로그 파일 확인
          echo ""
          echo "📋 생성된 로그:"
          if [ -d "logs" ]; then
            find logs -name "*.log" -o -name "*.txt" | sort | while read logfile; do
              if [ -f "$logfile" ]; then
                LOG_SIZE=$(stat -f%z "$logfile" 2>/dev/null || stat -c%s "$logfile" 2>/dev/null || echo "0")
                echo "  📄 $logfile (${LOG_SIZE} bytes)"
              fi
            done
          fi
          
          # 실제 수집된 경기 데이터 내용 표시
          echo ""
          echo "⚾ 수집된 최신 경기 데이터:"
          echo "========================"
          
          if [ -f "data/games.json" ] && command -v jq >/dev/null 2>&1; then
            # 오늘 날짜 (KST 기준)
            TODAY=$(TZ='Asia/Seoul' date '+%Y-%m-%d')
            echo "🏆 오늘($TODAY) 종료된 경기:"
            
            TODAY_GAMES=$(jq -r --arg today "$TODAY" '.[] | select(.date == $today and (.status == "completed" or .status == "終了" or .finished == true)) | "\(.home_team) \(.home_score) - \(.away_score) \(.away_team) [\(.status // "종료")]"' data/games.json 2>/dev/null)
            
            if [ -n "$TODAY_GAMES" ]; then
              echo "$TODAY_GAMES" | while read game; do
                echo "  ⚾ $game"
              done
            else
              echo "  🔍 오늘 종료된 경기가 없습니다"
            fi
            
            echo ""
            echo "📅 최근 완료된 경기 (최대 3경기):"
            jq -r '.[] | select(.status == "completed" or .status == "終了" or .finished == true) | "\(.date) \(.home_team) \(.home_score) - \(.away_score) \(.away_team)"' data/games.json 2>/dev/null | tail -3 | while read game; do
              echo "  📊 $game"
            done
            
            echo ""
            echo "📅 예정된 경기 (최대 3경기):"
            jq -r '.[] | select(.status != "completed" and .status != "終了" and .finished != true) | "\(.date) \(.time // "시간미정") - \(.home_team) vs \(.away_team)"' data/games.json 2>/dev/null | head -3 | while read game; do
              echo "  🕐 $game"
            done
          else
            echo "  ❌ 경기 데이터를 읽을 수 없습니다 (games.json 또는 jq 없음)"
          fi
          
          echo ""
          if [ -f "data/standings.json" ] && command -v jq >/dev/null 2>&1; then
            echo "📊 현재 순위표 상위 3팀:"
            echo "  🏆 센트럴리그:"
            jq -r '.central[0:3][] | "    \(.rank // "?")위 \(.team) (\(.wins // 0)승\(.losses // 0)패 승률\(.win_rate // "?"))"' data/standings.json 2>/dev/null || echo "    ❌ 센트럴리그 데이터 없음"
            
            echo "  🏆 퍼시픽리그:"
            jq -r '.pacific[0:3][] | "    \(.rank // "?")위 \(.team) (\(.wins // 0)승\(.losses // 0)패 승률\(.win_rate // "?"))"' data/standings.json 2>/dev/null || echo "    ❌ 퍼시픽리그 데이터 없음"
          else
            echo "📊 순위표 데이터를 읽을 수 없습니다"
          fi
          
          echo ""
          echo "🔢 전체 데이터 통계:"
          if [ -f "data/dashboard.json" ] && command -v jq >/dev/null 2>&1; then
            TOTAL_GAMES=$(jq -r '.stats.total_games // "?"' data/dashboard.json 2>/dev/null)
            COMPLETED_GAMES=$(jq -r '.stats.completed_games // "?"' data/dashboard.json 2>/dev/null)
            REMAINING_GAMES=$(jq -r '.stats.remaining_games // "?"' data/dashboard.json 2>/dev/null)
            LAST_UPDATE=$(jq -r '.last_updated // "?"' data/dashboard.json 2>/dev/null)
            
            echo "  📈 전체 경기: ${TOTAL_GAMES}경기"
            echo "  ✅ 완료된 경기: ${COMPLETED_GAMES}경기" 
            echo "  ⏳ 남은 경기: ${REMAINING_GAMES}경기"
            echo "  🕐 마지막 업데이트: ${LAST_UPDATE}"
          else
            echo "  ❌ 대시보드 통계를 읽을 수 없습니다"
          fi
          
          echo ""
          echo "✨ 실제 데이터 내용 표시 완료"

      - name: 📝 변경사항 확인 및 커밋
        run: |
          # Git 사용자 설정
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # 변경된 파일 추가
          git add data/simple/*.txt 2>/dev/null || true
          git add data/*.json 2>/dev/null || true
          
          # 변경사항이 있는지 확인
          if ! git diff --cached --quiet; then
            # 한국 시간으로 커밋 메시지 생성
            CURRENT_TIME=$(date '+%Y-%m-%d %H:%M KST')
            CHANGED_FILES=$(git diff --cached --name-only | wc -l)
            
            echo "✅ ${CHANGED_FILES}개 파일 변경 감지"
            
            # 커밋 및 푸시
            git commit -m "🤖 NPB 자동 업데이트 - ${CURRENT_TIME}
            
            📈 업데이트된 데이터:
            - NPB 순위표 및 경기 결과
            - 남은 경기 일정
            - 대시보드 통계
            
            🚀 Generated by GitHub Actions"
            
            # 재시도 로직을 포함한 푸시
            for i in {1..3}; do
              if git push; then
                echo "✅ 푸시 성공 (시도: $i)"
                break
              else
                echo "❌ 푸시 실패 (시도: $i/3)"
                if [ $i -lt 3 ]; then
                  echo "⏳ 5초 후 재시도..."
                  sleep 5
                  git pull --rebase origin main || true
                fi
              fi
            done
          else
            echo "ℹ️ 업데이트할 데이터가 없습니다"
          fi
        timeout-minutes: 5
